<?php

namespace app\models;

use Yii;
use yii\helpers\FileHelper;
use app\helpers\Formats;
use yii\web\UploadedFile;
use yii\imagine\Image;
use Imagine\Image\ManipulatorInterface;

/**
 * This is the model class for table "ext_page".
 *
 * @property int $id
 * @property int $page_id Страница
 * @property string $cover Обложка
 * @property string $shor_content Описание
 */
class ExtPage extends \yii\db\ActiveRecord
{
    private $_file_path = '/uploads/pages';

    /**
     * @var UploadedFile $imageFile
     */
    public $imageFile;
    public $imageMainFile;

    public $clear_img;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'ext_page';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['page_id'], 'required'],
            [['page_id'], 'integer'],
            [['shor_content'], 'string'],
            [['cover'], 'string', 'max' => 255],
            [['image'], 'string', 'max' => 255],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            [['imageMainFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            ['clear_img', 'boolean', 'trueValue' => true, 'falseValue' => false],
	        [['depart'], 'integer'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'page_id' => 'Страница',
            'cover' => 'Обложка',
            'shor_content' => 'Описание',
            'image' => 'Подробная картинка',
	        'depart' => 'Подразделение',
            // --------
            'imageFile' => 'Обложка',
            'imageMainFile' => 'Подробная картинка',
            'clear_img' => 'Удалить картинки',
        ];
    }
    // url обложки
    public function getCoverUrl()
    {
        $url = Yii::$app->request->baseUrl . $this->_file_path . '/' . $this->cover;
        if (!$this->cover || !is_file($this->getCoverPath()))
            $url = Yii::getAlias('@web') .'/imgs/no-img.jpg';
        return $url;
    }
    // url основной картинки
    public function getMainImageUrl()
    {
        $url = Yii::$app->request->baseUrl . $this->_file_path . '/' . $this->image;
        if (!$this->image || !is_file($this->getMainImagePath()))
            $url = false;
        return $url;
    }
    // полный путь до обложки
    public function getCoverPath()
    {
        $path = Yii::getAlias('@webroot') . $this->_file_path;
        if (!is_dir($path)) FileHelper::createDirectory($path,'0775',true);
        return $path . DIRECTORY_SEPARATOR . $this->cover;
    }
    // полный путь до основной картинки
    public function getMainImagePath()
    {
        $path = Yii::getAlias('@webroot') . $this->_file_path;
        if (!is_dir($path)) FileHelper::createDirectory($path,'0775',true);
        return $path . DIRECTORY_SEPARATOR . $this->image;
    }
    // загрузка обложки
    public function uploadCover()
    {
        if ( $this->imageFile ) {
            if ($this->cover) $this->deleteCover();
            $name = Formats::generateUrl($this->imageFile->baseName);
            $this->cover = $name . '.' . $this->imageFile->extension;
            $this->imageFile->saveAs( $this->getCoverPath() );
            return true;
        } else {
            return false;
        }
    }
    // загрузка основной картинки
    public function uploadMainImage()
    {
        if ( $this->imageMainFile ) {
            if ($this->image) $this->deleteMainImage();
            $name = Formats::generateUrl( $this->imageMainFile->baseName );
            $this->image = $name . '.' . $this->imageMainFile->extension;
            $this->imageMainFile->saveAs($this->getMainImagePath());
            return true;
        } else {
            return false;
        }
    }

    public function getPage()
    {
        return self::hasOne(Pages::className(),['id' => 'page_id']);
    }

    public function beforeSave($insert)
    {
        $this->uploadCover();
        $this->uploadMainImage();
        if ($this->clear_img) {
            $this->cover = NULL;
            $this->image = NULL;
            $this->deleteCover();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    // возвращает ссылку на картинку
    public function getPrevLink($w = 250,$h = 250)
    {
        $link = $url = Yii::getAlias('@web') .'/img/no-img.jpg';
        $file = $this->coverPath;
        if (is_file($file) && $w && $h) {
            $cache_dir = Yii::getAlias('@webroot') . $this->_file_path . DIRECTORY_SEPARATOR;
            $file_name = 'caches_' . $w . 'x' . $h . '_' . $this->cover;
            $cache_file = $cache_dir .$file_name;

            if (!is_dir($cache_dir))
                FileHelper::createDirectory($cache_dir);

            if (!is_file($cache_dir)) {
                Image::thumbnail($file, $w, $h, ManipulatorInterface::THUMBNAIL_INSET)
                    ->save($cache_file, ['quality' => 60]);
            }

            $link = Yii::$app->request->getBaseUrl() . $this->_file_path . '/' . $file_name;
        }

        /*if (!is_file($file)) {
        	$link = 'https://via.placeholder.com/'.$w.'x'.$h;
        }*/

        return $link;
    }

    public function beforeDelete()
    {
        $this->deleteCover();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function deleteCover()
    {
        if ( is_file($this->getCoverPath()) )
            @unlink($this->getCoverPath());
    }

    public function deleteMainImage()
    {
        if ( is_file($this->getMainImagePath()) )
            @unlink($this->getMainImagePath());
    }

    public function getShortContent()
    {
        $result = $this->shor_content;
        if ($result == NULL)
            $result = substr( strip_tags($this->page->content) , 0 , 250);
        return $result;
    }

    public function getDeparte()
    {

    }

}
