<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;

/**
 * This is the model class for table "menu".
 *
 * @property integer $id
 * @property string $name
 * @property string $url
 * @property integer $page
 * @property integer $parent
 * @property integer $position
 * @property integer $category_id
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 */
class Menu extends \yii\db\ActiveRecord
{
	const TYPE_LINK = 1;
	const TYPE_PAGE = 0;

    public $type;

    public static function getType()
    {
    	return [
		    self::TYPE_LINK => 'Url',
		    self::TYPE_PAGE => 'Page',
	    ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'menu';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'category_id'], 'required'],
            [['page', 'parent', 'position', 'category_id', 'created_at', 'updated_at', 'created_by', 'updated_by'], 'integer'],
            [['name'], 'string', 'max' => 100],
            [['url'], 'string', 'max' => 1024],
            ['type','in','range'=>array_keys(self::getType())],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'url' => 'Ссылка',
            'page' => 'Страницы',
            'parent' => 'Родительский раздел',
            'position' => 'Позиция',
            'category_id' => 'Категория',
            'created_at' => 'Дата добавления',
            'updated_at' => 'Дата изменения',
            'created_by' => 'Автор',
            'updated_by' => 'Модератор',
            //----------
            'type' => 'Тип',
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
        ];
    }

    public function afterFind()
    {
        if ($this->url == NULL)
            $this->type = self::TYPE_PAGE;
	    if ($this->page == NULL)
		    $this->type = self::TYPE_LINK;
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
//    	var_dump($this->type === self::TYPE_PAGE);exit;
        if ($this->position == NULL)
            $this->position = $this->setPosition($this->category_id,$this->parent);
        if ($this->type == self::TYPE_PAGE)
            $this->url = NULL;
	    if ($this->type == self::TYPE_LINK)
            $this->page = NULL;
//var_dump($this->type,$this->url,$this->page);exit;

        return parent::beforeSave($insert);
    }

    /**
     * возвращаем максимальный номер позиции в категории
     */
    public function setPosition($id_category,$id_parent)
    {
        $max_position = self::find()
            ->where([
                'category_id' => $id_category,
                'parent' => $id_parent
            ])
            ->max('position');
        return $max_position + 1;
    }

    public function getChildren()
    {
        return $this->hasMany(self::className(),['parent' => 'id']);
    }

    /**
     * @inheritdoc
     */
    public function beforeDelete()
    {
        $childrens = $this->children;
        foreach($childrens as $children)
            $children->delete();
        return parent::beforeDelete();
    }

    public function getPageRelativ()
    {
        if ($this->page)
            return $this->hasOne(Pages::className(),['id' => 'page']);
        return null;
    }

    public function getRealUrl()
    {
        if ($this->url)
            return $this->url;
        if ($this->page && $this->pageRelativ) {
            return $this->pageRelativ->urlPage;
        }
        return '/#';
    }

    public function getCategoryMenu()
    {
    	return $this->hasOne(CategoryMenu::className(),['id'=>'category_id']);
    }
}
