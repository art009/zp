<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;

/**
 * This is the model class for table "staff".
 *
 * @property int $id
 * @property string $photo Фотография
 * @property string $name ФИО
 * @property string $position Должность
 * @property int $page_id Страница
 */
class Staff extends \yii\db\ActiveRecord
{
    const PATH_STAFF = '/uploads/staff';
    public $imageFile;
    public $pages_id;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'staff';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'position'], 'required'],
            [['pages_id'], 'safe'],
            [['photo', 'name', 'position'], 'string', 'max' => 255],
            [['created_at', 'updated_at', 'created_by', 'updated_by'], 'integer'],
            [['page_id'],'integer'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, bmp'],
            ['is_record', 'integer'],
	        ['is_online', 'integer'],
	        ['is_home', 'integer'],
	        ['depart', 'integer'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'            => 'ID',
            'photo'         => 'Фотография',
            'name'          => 'ФИО',
            'position'      => 'Должность',
            'created_at'    => 'Дата добавления',
            'updated_at'    => 'Дата изменения',
            'created_by'    => 'Автор',
            'updated_by'    => 'Модератор',
            'page_id'       => 'Страница',
            'is_record'     => 'Наличие записи',
	        'depart'        => 'Подразделение',
	        'is_online'     => 'Консультация online',
	        'is_home'       => 'Вызов на дом',
            //--------------------------
            'pages_id'       => 'Страница',
            'imageFile'     => 'Фотография',
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            [
                'class' => BlameableBehavior::className(),
	            'value' => 1,
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
        ];
    }

    public function getImgLink()
    {
        $path = Yii::getAlias('@webroot') . self::PATH_STAFF;
        $file_link = Yii::getAlias('@web/imgs/default_photo.jpg');
        if (is_file($path . DIRECTORY_SEPARATOR . $this->photo))
            $file_link = Yii::getAlias('@web') . self::PATH_STAFF . '/' . $this->photo;
        return $file_link;
    }

    public function upload()
    {
        $path = Yii::getAlias('@webroot') . self::PATH_STAFF;
        if(!is_dir($path))
            FileHelper::createDirectory($path,'0775',true);

        if ($this->validate() && $this->imageFile) {
            $new_file_name = time() . '_' . $this->imageFile->baseName . '.' . $this->imageFile->extension;
            $this->imageFile->saveAs($path . DIRECTORY_SEPARATOR . $new_file_name);
            $this->photo = $new_file_name;
//            return true;
        }
        return true;
    }
    // привязанная страница к слайдеру
    public function getPages()
    {
        return self::hasMany(Pages::className(),['id' => 'page_id'])
            ->viaTable('{{%page_staff}}',['staff_id' => 'id']);
    }

    // привязанная страница к слайдеру
    public function getPage()
    {
        return self::hasOne(Pages::className(),['id' => 'page_id']);
    }

    public function afterFind()
    {
        $array_models = ArrayHelper::toArray($this->pages, [
            Pages::className() => [
                'id',
            ],
        ]);
        $this->pages_id = implode(',',ArrayHelper::getColumn($array_models,'id'));
        return parent::afterFind();
    }

    public function afterSave($insert, $changedAttributes)
    {
        /*
        Yii::$app->db->createCommand()
            ->delete('{{%page_staff}}',[
                'staff_id' => $this->id,
            ])->execute();

        if ($this->pages_id) {
            $page_ids = explode(',',$this->pages_id);

            foreach ($page_ids as $page_id) {
                Yii::$app->db->createCommand()
                    ->insert('{{%page_staff}}',[
                        'page_id' => $page_id,
                        'staff_id' => $this->id,
                    ])->execute();
            }
        }
        */
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        if ($this->page) {
            $this->page->delete();
        }
        return parent::beforeDelete();
    }

    private function deleteImage()
    {
        $file = Yii::getAlias('@webroot') . self::PATH_STAFF . DIRECTORY_SEPARATOR . $this->photo;
        if (is_file($file))
            @unlink($file);
    }
}
