<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "reviews".
 *
 * @property int $id
 * @property int $status Статус
 * @property string $email Email
 * @property string $created_name Автор
 * @property string $review Отзыв
 * @property int $created_at Дата добавления
 * @property int $updated_at Дата изменения
 * @property string $phone Номер телефона
 */
class Reviews extends \yii\db\ActiveRecord
{
    const STATUS_NEW = 10;
    const STATUS_ACTIVE = 20;
    const STATUS_BLOCK = 30;

    const TYPE_REVIEWS = 10;
    const TYPE_QUESTION = 20;
    const TYPE_MODERATE = 30;

    public $agree = true;
    public $reCaptcha;

    public static function getSatusReviews ()
    {
        return [
            self::STATUS_NEW => 'Новый',
            self::STATUS_ACTIVE => 'Активный',
            self::STATUS_BLOCK => 'Бан',
        ];
    }
    public static function getTypeReviews ()
    {
        return [
            self::TYPE_REVIEWS => 'Отзыв',
            self::TYPE_QUESTION => 'Вопрос',
            self::TYPE_MODERATE => 'Модерация',
        ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'reviews';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'created_name', 'review'], 'required'],
            [['review', 'answer'], 'string'],
            [['created_at', 'updated_at'], 'integer'],
            [['type'], 'in', 'range' => array_keys( self::getTypeReviews() )],
            [['status'], 'integer', 'max' => 99],
            ['category_id', 'integer'],
            [['email', 'created_name'], 'string', 'max' => 150],
            ['type','default', 'value' => self::TYPE_MODERATE],
            ['phone', 'string', 'max' => 25],
            ['phone', 'match', 'pattern' => '/^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/'],
            ['phone','filter', 'filter' => [$this, 'normalizePhone']],
            ['review','filter', 'filter' => [$this, 'clearReview']],
            ['agree', 'compare', 'compareValue' => 1, 'operator' => '==', 'type' => 'number','message' => 'Необходимо принять условия пользовательского соглашения.'],
            [
                ['reCaptcha'],
                \app\widgets\GoogleReCaptcha\GoogleReCaptchaValidator::className(),
                'uncheckedMessage' => 'Please confirm that you are not a bot.',
                'skipOnEmpty' => ( is_a(Yii::$app,'yii\console\Application') || !Yii::$app->user->isGuest ),
                'message' => 'Автоматическая рассылка заблокирована.',
            ],
	        ['depart','integer'],
        ];
    }

    public function normalizePhone($value) {
        return \app\helpers\Formats::normalizePhone($value);
    }

    public function clearReview($value) {
        return strip_tags($value);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'status' => 'Статус',
            'email' => 'Email',
            'created_name' => 'Автор',
            'phone' => 'Телефон',
            'review' => 'Вопрос',
            'answer' => 'Ответ',
            'category_id' => 'Категория',
            'created_at' => 'Дата добавления',
            'updated_at' => 'Дата изменения',
            'type' => 'Тип отзыва',
	        'depart' => 'Подразделение',
        ];
    }
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

	public function contact($email)
	{
		if ($this->validate()) {
			$text_body = 'Клиент: ' . $this->created_name . PHP_EOL;
			$text_body .= 'Телефон: ' . $this->phone . PHP_EOL;
			$text_body .= 'Email: ' . $this->email . PHP_EOL;
			$text_body .= 'Сообщение: ' . $this->review . PHP_EOL;

			$mailer = Yii::$app->mailer->compose()
				->setFrom([Yii::$app->params['supportEmail'] => 'Robot'])
				->setSubject('Отзыв/Вопрос :: '. Yii::$app->name)
				->setTextBody($text_body);

			$mails = explode(',',$email);

			foreach ($mails as $mail) {
				$mailer
					->setTo( trim($mail) )
					->send();
			}

			return true;
		}
		return false;
	}

}
