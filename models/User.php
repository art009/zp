<?php

namespace app\models;

use Yii;
use budyaga\users\models\User as MainUser;
use yii\helpers\Url;
use yii\helpers\ArrayHelper;

class User extends MainUser
{
    const SCENARIO_LOGIN = 'login';
    const SCENARIO_CHANGE_PASSWORD = 'changePassword';

    public $_password;
    public $_role;
    public $_find_role;

    public function rules()
    {
        return ArrayHelper::merge(
            parent::rules(),
            [
//                [['phone'], 'string', 'max' => 25],
                /* TODO: открыть проверку после миграции
                [
                    'phone',
                    'match',
                    'pattern' => '/^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/',
                    'message' => 'Номер телефона должен соответствовать формату: +7(111)111-11-11',
                ],
                */
                /*
                ['phone', 'filter', 'filter' => function ($value) {
                    $value = preg_replace("/[^0-9]/", "", $value);

                    if (strlen($value) === 11) {
                        $value = preg_replace("/^8/", "7", $value);
                    }
                    return $value;
                }],
*/
                ['_password', 'string', 'min' => 6],
                ['_role', 'string'],

                //['last_login', 'default', 'value' => time() ,'on' => [self::SCENARIO_LOGIN],],
                //['last_ip', 'string', 'max' => 15],
                /* TODO: открыть проверку после миграции
                 * [
                    'last_ip',
                    'default',
                    'value' => Yii::$app->request->userIP ,
                    'on' => [self::SCENARIO_LOGIN],
                ],*/
                //['old_password_hash', 'string', 'max' => 100],
            ]
        );
    }

    // валидация пароля
    public function validatePassword($password)
    {
        if ($this->password_hash == 1 && (md5($password) == $this->old_password_hash)) {
            $this->_password = $password;
            $this->old_password_hash = null;
            if ($this->save())
                return true;
        }

        return parent::validatePassword($password);
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(
            parent::attributeLabels(),
            [
//                'phone' => 'Номер телефона',
//                'last_login' => 'Последниий Login',
                '_role' => 'Роль',
                '_password' => 'Новый пароль',
            ]
        );
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_LOGIN] = ['last_login', 'last_ip'];
        $scenarios[self::SCENARIO_CHANGE_PASSWORD] = ['_password'];
        return $scenarios;
    }

    public function beforeSave($insert)
    {
        if ($this->_password)
            $this->setPassword($this->_password);
        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->_role && (!in_array($this->_role,$this->_find_role)) )
        {
            $userRole = Yii::$app->authManager->getRole($this->_role);
            Yii::$app->authManager->revokeAll($this->id);
            Yii::$app->authManager->assign($userRole, $this->id);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->_find_role = array_keys( Yii::$app->authManager->getRolesByUser($this->id) );
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function sendEmailConfirmationMail($view, $toAttribute)
    {
        return \Yii::$app->mailer->compose(['html' => $view . '-html', 'text' => $view . '-text'], ['user' => $this, 'token' => $this->emailConfirmToken])
            ->setFrom([\Yii::$app->params['supportEmail'] => \Yii::$app->name . ' robot'])
            ->setTo($this->emailConfirmToken->{$toAttribute})
            ->setSubject('Подтверждение Email на сайте ' . \Yii::$app->name)
            ->send();
    }
}
