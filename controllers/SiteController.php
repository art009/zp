<?php

namespace app\controllers;

use app\models\Depart;
use app\models\Menu;
use app\models\Reviews;
use Yii;
use app\models\Pages;
use app\helpers\Pages AS PagesHelper;
use app\components\MainController;
use yii\web\NotFoundHttpException;
use yii\helpers\Url;
use budyaga\users\models\UserEmailConfirmToken;
use yii\web\Response;

class SiteController extends MainController
{
//    public $layout = '@app/views/layouts/flowers';

	public function beforeAction($action)
	{
//		$this->layout = '@app/views/layouts/two_column';

		if ( !empty(Yii::$app->params['depart']) )
			$this->layout = '@app/views/layouts/two_column';

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
            'login' => [
                'class' => 'app\widgets\SignInWidget\components\LoginAction',
                'layout' => '@app/views/layouts/main',
            ],
            'logout' => [
                'class' => 'app\widgets\SignInWidget\components\LogoutAction',
            ],
            'contact-form' => [
                'class' => 'app\widgets\ContactWidget\components\MailAction',
            ],
            'add-reviews' => [
                'class' => 'app\widgets\ReviewsWidget\components\ReviewAction',
            ],
            'signup' => [
                'class' => 'app\widgets\SignUpWidget\components\RegisterAction',
            ],
	        'content-window' => [
	        	'class' => 'app\widgets\ModalWindowWidget\actions\ContentWindowAction',
	        ],
        ];
    }

    public function actionIndex()
    {
        $page = Pages::findOne(['layout' => PagesHelper::LAYOUT_MAIN]);

//        $this->layout = '@app/views/layouts/one_column';
	    $this->layout = '@app/views/layouts/main';
        return $this->actionPage($page->url);
    }

    public function actionPage($url, $depart = NULL)
    {
        $page = Pages::findOne(['url' => $url,'status' => PagesHelper::STATUS_PUBLIC]);
        if ( !$page)
            throw new NotFoundHttpException('Запрашиваемая страница не найдена.');
		$default_depart = Depart::defaultDepart();

	    if ( Yii::$app->params['depart'] != $page->extPage->depart )
		    throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        if ( !in_array($page->layout, [
                PagesHelper::LAYOUT_MAIN,
                PagesHelper::LAYOUT_ACTION,
                PagesHelper::LAYOUT_ACTIONS_LIST,
                PagesHelper::LAYOUT_ARTICLE,
	            PagesHelper::LAYOUT_NEWS,
		        PagesHelper::LAYOUT_NEWS_LIST,
                PagesHelper::LAYOUT_ARTICLE_LIST,
            ]) ) {
//        	var_dump(Yii::$app->params['depart']);exit;
	        /*if (Yii::$app->params['depart']) {
	        	$depart = Depart::findOne(['AND',
	        		['id' => Yii::$app->params['depart'],],
			        ['<>','is_main',1]
		        ]);

	        	if ($depart && $depart->page ) {
			        Yii::$app->view->params['breadcrumbs'][] = [
			        	'label' => $depart->name,//page->title_page,
				        'url' => $depart->page->getUrlPage(),
			        ];
		        }
	        }*/
//	        var_dump($page->extPage->depart);exit;
	        if ($page->extPage->depart
		        && ($page->extPage->depart != $default_depart->id) ) {
			        $depart = Depart::findOne(['AND',
				        ['id' => $page->extPage->depart],
				        ['<>','is_main',1]
			        ]);
			        Yii::$app->view->params['breadcrumbs'][] = [
				        'label' => $depart->name,
				        'url' => $depart->mainPage->getUrlPage(),
			        ];
	        }
	        Yii::$app->view->params['breadcrumbs'][] = $page->title_page;
        }

        Yii::$app->view->title = $page->meta_title;
        Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => $page->meta_description,
        ]);
        Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $page->meta_keywords,
        ]);

        return $this->render(PagesHelper::getArrayLayoutName()[$page->layout],['page' => $page]);
    }

    public function actionNews($url,$depart = NULL)
    {
        $page = Pages::findOne([
            'url' => $url,
            'status' => PagesHelper::STATUS_PUBLIC,
            'layout' => PagesHelper::LAYOUT_NEWS,
        ]);
        if (!$page)
            throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        if ( $depart &&  $page->extPage->depart != $depart)
	        throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        Yii::$app->view->title = $page->meta_title;
        Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => $page->meta_description,
        ]);
        Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $page->meta_keywords,
        ]);

        return $this->render(PagesHelper::getArrayLayoutName()[$page->layout],['page' => $page]);
    }

	public function actionDepart($url)
	{
		$this->layout = 'two_column';
		$depart = Depart::findOne([
			'slug' => $url,
		]);
		if ( !$depart || !$depart->mainPage )
			throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

		$page = $depart->mainPage;

		Yii::$app->view->title = $page->meta_title;
		Yii::$app->view->registerMetaTag([
			'name' => 'description',
			'content' => $page->meta_description,
		]);
		Yii::$app->view->registerMetaTag([
			'name' => 'keywords',
			'content' => $page->meta_keywords,
		]);

		return $this->render(PagesHelper::getArrayLayoutName()[$page->layout],['page' => $page]);
	}

    public function actionArticle($url)
    {
        $page = Pages::findOne([
            'url'       => $url,
            'status'    => PagesHelper::STATUS_PUBLIC,
            'layout'    => PagesHelper::LAYOUT_ARTICLE,
        ]);
        if (!$page)
            throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        Yii::$app->view->title = $page->meta_title;
        Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => $page->meta_description,
        ]);
        Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $page->meta_keywords,
        ]);

        return $this->render(PagesHelper::getArrayLayoutName()[$page->layout],['page' => $page]);
    }

    public function actionConfirmEmail($token)
    {
        $tokenModel = UserEmailConfirmToken::findToken($token);

        if ($tokenModel) {
            Yii::$app->getSession()->setFlash('success', $tokenModel->confirm($token));
        } else {
            Yii::$app->getSession()->setFlash('error', 'Ссылка не верна.');
        }

        return $this->redirect(Url::toRoute('/login'));
    }

    public function actionWorkTime()
    {
        // if (Yii::$app->request->isAjax)
            return $this->renderPartial('work-time');
        // else
        //    return NotFoundHttpException('Запрашиваемая страница не найдена.');
    }
    // результат поиска
    public function actionSearch($query)
    {
        $array_layout = [
            PagesHelper::LAYOUT_PAGE,
            PagesHelper::LAYOUT_NEWS,
            PagesHelper::LAYOUT_ARTICLE,
            PagesHelper::LAYOUT_WORKER,
        ];

	    $pages = NULL;

        foreach ($array_layout as $layout) {
            $and = ['AND'];
            $and[] = ['layout' => $layout];
            $and[] = ['status' => PagesHelper::STATUS_PUBLIC];
            if ($layout == PagesHelper::LAYOUT_WORKER)
                $and[] = ['OR','MATCH(content) AGAINST(\''.$query.'\')','title_page LIKE "%'.$query.'%"'];
            else
                $and[] = 'MATCH(content) AGAINST(\''.$query.'\')';
	        if ($query) {
		        $pages[$layout] = Pages::find()->where($and)->limit(20)->all();
	        }
        }
//var_dump($pages);exit;
        return $this->render('search',[
            'pages' => $pages,
            'query' => $query,
            'array_layout' => $array_layout,
        ]);
    }

    public function actionStaff($url,$depart = NULL)
    {
        $page = Pages::findOne([
	        'url' => $url,
	        'status' => PagesHelper::STATUS_PUBLIC,
            'layout' => PagesHelper::LAYOUT_WORKER,
        ]);
        if (!$page || !$page->worker)
            throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        if ($depart)
        	$this->layout = '@app/views/layouts/two_column';

        Yii::$app->view->title = $page->meta_title;
        Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => $page->meta_description,
        ]);
        Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $page->meta_keywords,
        ]);

        return $this->render(PagesHelper::getArrayLayoutName()[$page->layout],[
            'page' => $page,
            'worker' => $page->worker,
        ]);
    }

    public function actionFaqViews($id)
    {
        $faq = Reviews::findOne([
            'id' => $id,
            'type' => Reviews::TYPE_QUESTION,
            'status' => Reviews::STATUS_ACTIVE,
        ]);
        if (!$faq)
            throw new NotFoundHttpException('Запрашиваемая страница не найдена.');

        Yii::$app->view->title = $faq->review;
        Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => $faq->review,
        ]);
        Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $faq->review,
        ]);

        return $this->render('faq_view',[
            'faq' => $faq,
        ]);
    }

    public function actionInfo()
    {
        return phpinfo();
    }

    public function actionCounter()
    {
        \Yii::$app->response->format = Response::FORMAT_RAW;
        $days = round( ( time() - strtotime('July 1, 2018') ) / (24*60*60));
        return $days + 16326;
    }
}
